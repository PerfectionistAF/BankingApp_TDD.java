/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.bankingtest;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dell
 */
public class MENU_UI extends javax.swing.JFrame {

    /**
     * Creates new form MENU_UI
     */
    public MENU_UI() throws FileNotFoundException, UnsupportedEncodingException {
        UserAccount.fileLoad2();
        initComponents();
        setLocationRelativeTo(null);
        setSize(800, 500);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        AddAccBtn = new javax.swing.JButton();
        FinishBtn = new javax.swing.JButton();
        DepositBtn = new javax.swing.JButton();
        TransferBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        AccTable = new javax.swing.JTable();
        EnqBtn = new javax.swing.JButton();
        ExitBtn = new javax.swing.JButton();
        AboutBtn = new javax.swing.JButton();
        OpenAccBtn = new javax.swing.JButton();
        CloseAccBtn = new javax.swing.JButton();
        LoadTransBtn = new javax.swing.JButton();
        WithdrawBtn1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(721, 445));

        AddAccBtn.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        AddAccBtn.setText("Add Account");
        AddAccBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddAccBtnMouseClicked(evt);
            }
        });
        AddAccBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddAccBtnActionPerformed(evt);
            }
        });

        FinishBtn.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        FinishBtn.setText("Dequeue");
        FinishBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinishBtnActionPerformed(evt);
            }
        });

        DepositBtn.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        DepositBtn.setText("Deposit");
        DepositBtn.setEnabled(false);
        DepositBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositBtnActionPerformed(evt);
            }
        });

        TransferBtn.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        TransferBtn.setText("Transfer");
        TransferBtn.setEnabled(false);
        TransferBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferBtnActionPerformed(evt);
            }
        });

        AccTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Account Name", "Account Number", "Balance", "Account Type", "Active"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AccTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(AccTable);

        EnqBtn.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        EnqBtn.setText("Enqueue");
        EnqBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnqBtnActionPerformed(evt);
            }
        });

        ExitBtn.setBackground(new java.awt.Color(255, 204, 204));
        ExitBtn.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        ExitBtn.setText("Exit");
        ExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBtnActionPerformed(evt);
            }
        });

        AboutBtn.setBackground(new java.awt.Color(204, 204, 255));
        AboutBtn.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        AboutBtn.setText("About");
        AboutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutBtnActionPerformed(evt);
            }
        });

        OpenAccBtn.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        OpenAccBtn.setText("Open Account");
        OpenAccBtn.setEnabled(false);
        OpenAccBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenAccBtnActionPerformed(evt);
            }
        });

        CloseAccBtn.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        CloseAccBtn.setText("Close Account");
        CloseAccBtn.setEnabled(false);
        CloseAccBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseAccBtnActionPerformed(evt);
            }
        });

        LoadTransBtn.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        LoadTransBtn.setText("Load Transact");
        LoadTransBtn.setEnabled(false);
        LoadTransBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadTransBtnActionPerformed(evt);
            }
        });

        WithdrawBtn1.setFont(new java.awt.Font("Segoe UI Symbol", 0, 13)); // NOI18N
        WithdrawBtn1.setText("Withdraw");
        WithdrawBtn1.setEnabled(false);
        WithdrawBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithdrawBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(AddAccBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                            .addComponent(TransferBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(OpenAccBtn)
                                .addGap(18, 18, 18)
                                .addComponent(EnqBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(FinishBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(DepositBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(WithdrawBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(CloseAccBtn)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ExitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(LoadTransBtn)
                                .addGap(29, 29, 29)
                                .addComponent(AboutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(259, 259, 259))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddAccBtn)
                    .addComponent(OpenAccBtn)
                    .addComponent(EnqBtn)
                    .addComponent(FinishBtn)
                    .addComponent(ExitBtn))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TransferBtn)
                    .addComponent(DepositBtn)
                    .addComponent(CloseAccBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WithdrawBtn1)
                    .addComponent(AboutBtn)
                    .addComponent(LoadTransBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        fileMenu.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Add Account");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem8.setText("Enqueue");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem8);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Withdraw");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setText("Deposit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("Transfer");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem5.setText("Change Currency");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem5);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem9.setText("Finish (Dequeue)");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem9);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem6.setText("Exit");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem6);

        jMenuBar1.add(fileMenu);

        jMenu2.setText("Help");

        jMenuItem7.setText("About");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddAccBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddAccBtnActionPerformed
        // TODO add your handling code here:ADD ACCOUNT
        ADDACCOUNT_UI NewAcc = new ADDACCOUNT_UI(this, true);
        NewAcc.setVisible(true);
        
    }//GEN-LAST:event_AddAccBtnActionPerformed

    private void FinishBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinishBtnActionPerformed
        // TODO add your handling code here:DEQUEUE
        DefaultTableModel model = (DefaultTableModel) AccTable.getModel();
        int i;
        if(!UserAccount.enqueUsers.isEmpty()){
            try {
                model.removeRow(0);
                UserAccount.enqueUsers.dequeue();
                i = model.getRowCount();
                if(i==0){
                    enableBtns(false);
                }
            } catch (IOException ex) {
                Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            JOptionPane.showMessageDialog(this,
                    "There is no elements in the queue", "ERROR!!", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_FinishBtnActionPerformed

    private void DepositBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositBtnActionPerformed
        // TODO add your handling code here:DEPOSIT
       if(AccTable.getValueAt(0, 4)== "Yes"){
        DEPOSIT_UI d = new DEPOSIT_UI(this, true,(int) AccTable.getValueAt(0, 1));
        d.setVisible(true);
        if(d.getAcc()!=null){
            reloadRow(d.getAcc());
            }
        }
        else{
            JOptionPane.showMessageDialog(this, 
                    "Account must be opened to de any operation", 
                    "ERROR!!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DepositBtnActionPerformed

    private void TransferBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferBtnActionPerformed
        // TODO add your handling code here:TRANSFER
        if(AccTable.getValueAt(0, 4)== "Yes"){
        TRANSFER_UI T = new TRANSFER_UI(this, true,(int) AccTable.getValueAt(0, 1));
        T.setVisible(true);
            if(T.getAcc1()!=null){
                reloadRow(T.getAcc1());
            }
            if(T.getAcc2()!=null){
                for(int i = 0; i < AccTable.getRowCount(); i++){//For each row
        //For each column in that row
                if((int) AccTable.getModel().getValueAt(i, 1)==T.getAcc2().getAccountNumber()){//Search the model
                    //System.out.println(AccTable.getModel().getValueAt(i, j));//Print if found string
                    reloadRow2(T.getAcc2(), i);
                }
        
                }   
            }
        }
        else{
            JOptionPane.showMessageDialog(this, 
                    "Account must be opened to de any operation",
                    "ERROR!!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_TransferBtnActionPerformed

    private void EnqBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnqBtnActionPerformed
        // TODO add your handling code here:ENQUEUE
        ENQUEUE_UI EnQ = new ENQUEUE_UI(this, true);
        EnQ.setVisible(true);
        if(EnQ.getAcc()!=null){
            for(int i = 0; i < AccTable.getRowCount(); i++){//For each row
        //For each column in that row
                if((int) AccTable.getModel().getValueAt(i, 1)==EnQ.getAcc().getAccountNumber()){//Search the model
                    JOptionPane.showMessageDialog(this, 
                            "Account is already Enqueued", "ERROR!!", JOptionPane.ERROR_MESSAGE);
                return;
                }
        
            }
            Node Acc = new Node(EnQ.getAcc());
            UserAccount.enqueUsers.enqueue(Acc);
            addAccount(EnQ.getAcc());
            enableBtns(true);
        }
    }//GEN-LAST:event_EnqBtnActionPerformed

    private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBtnActionPerformed
        // TODO add your handling code here:EXIT
        System.exit(0);
    }//GEN-LAST:event_ExitBtnActionPerformed

    private void AboutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutBtnActionPerformed
        // TODO add your handling code here: ABOUT
        ABOUT_UI A = new ABOUT_UI(this, true);
        A.setVisible(true);
    }//GEN-LAST:event_AboutBtnActionPerformed

    private void OpenAccBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenAccBtnActionPerformed
        // TODO add your handling code here:OPEN ACCOUNT
        ArrayList accounts;
        try {
            accounts = UserAccount.fileLoad2();
            UserAccount useraccount = (UserAccount)accounts.get(getAccNum()-1);
            if(useraccount.accountPresent()=="Account could not be opened"){
            useraccount.reopenAccount();
            reloadRow(useraccount);
            }
            else{
                JOptionPane.showMessageDialog(this, 
                        "The Account is already Opened", 
                        "ERROR!!", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_OpenAccBtnActionPerformed

    private void CloseAccBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseAccBtnActionPerformed
        // TODO add your handling code here:CLOSE ACCOUNT
        ArrayList accounts;
        try {
            accounts = UserAccount.fileLoad2();
            UserAccount useraccount = (UserAccount)accounts.get(getAccNum()-1);
            if(useraccount.accountPresent()=="Account opened successfully"){
                if(useraccount.getBalance()>0){
                    JOptionPane.showMessageDialog(this, 
                            "Can't close, Still have money", "ERROR!!", JOptionPane.ERROR_MESSAGE);
                    return; 
                }
                else{
                useraccount.closeAccount();
                reloadRow(useraccount);
                }
            }
            else{
               JOptionPane.showMessageDialog(this, 
                       "The Account is already Closed", 
                       "ERROR!!", JOptionPane.ERROR_MESSAGE);
                return; 
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CloseAccBtnActionPerformed

    private void LoadTransBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadTransBtnActionPerformed
        // TODO add your handling code here: LOAD
        TRANSACTION_UI t1 = new TRANSACTION_UI(this, true);
        ArrayList accounts;
        try {
            accounts = UserAccount.fileLoad2();
            UserAccount useraccount = (UserAccount)accounts.get((int) AccTable.getValueAt(0, 1)-1);
            FileReader reader =new FileReader("dataFile"+useraccount.getAccountNumber()+" Transaction.txt");
            BufferedReader br = new BufferedReader(reader);
            t1.jTextArea1.read(br,null);
            br.close();
            t1.jTextArea1.requestFocus();
            t1.setVisible(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_LoadTransBtnActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:ADD ACCOUNT SHORTCUT
        ADDACCOUNT_UI NewAcc = new ADDACCOUNT_UI(this, true);
        NewAcc.setVisible(true);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:ENQUEUE SHORCUT
        ENQUEUE_UI Enq = new ENQUEUE_UI(this, true);
        Enq.setVisible(true);
        if(Enq.getAcc()!=null){
            for(int i = 0; i < AccTable.getRowCount(); i++){//For each row
                //For each column in that row
                if((int) AccTable.getModel().getValueAt(i, 1)==Enq.getAcc().getAccountNumber()){//Search the model
                    JOptionPane.showMessageDialog(this, 
                            "Account is already Enqueued",
                            "ERROR!!", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            Node Acc = new Node(Enq.getAcc());
            UserAccount.enqueUsers.enqueue(Acc);
            addAccount(Enq.getAcc());
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:WITHDRAW SHORCUT
        WITHDRAW_UI w = new WITHDRAW_UI(this, true,(int) AccTable.getValueAt(0, 1));
        w.setVisible(true);
        if(w.getAcc()!=null){
            reloadRow(w.getAcc());
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:DEPOSIT SHORTCUT
        DEPOSIT_UI d = new DEPOSIT_UI(this, true,(int) AccTable.getValueAt(0, 1));
        d.setVisible(true);
        if(d.getAcc()!=null){
            reloadRow(d.getAcc());
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:TRANSFER SHORTCUT
        TRANSFER_UI T = new TRANSFER_UI(this, true,(int) AccTable.getValueAt(0, 1));
        T.setVisible(true);
        if(T.getAcc1()!=null){
            reloadRow(T.getAcc1());
        }
        if(T.getAcc2()!=null){
            for(int i = 0; i < AccTable.getRowCount(); i++){//For each row
                //For each column in that row
                if((int) AccTable.getModel().getValueAt(i, 1)==T.getAcc2().getAccountNumber()){//Search the model
                    //System.out.println(AccTable.getModel().getValueAt(i, j));//Print if found string
                    reloadRow2(T.getAcc2(), i);
                }
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) AccTable.getModel();
        if(!UserAccount.enqueUsers.isEmpty()){
            try {
                model.removeRow(0);
                UserAccount.enqueUsers.dequeue();
            } catch (IOException ex) {
                Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            JOptionPane.showMessageDialog(this, 
                    "There is no elements in the queue",
                    "ERROR!!", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:EXIT SHORTCUT
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:ABOUT SHORTCUT
        ABOUT_UI A = new ABOUT_UI(this, true);
        A.setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void WithdrawBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithdrawBtn1ActionPerformed
        // TODO add your handling code here:WITHDRAW 
        if(AccTable.getValueAt(0, 4)== "Yes"){
            WITHDRAW_UI w = new WITHDRAW_UI(this, true,(int) AccTable.getValueAt(0, 1));
            w.setVisible(true);
            if(w.getAcc()!=null){
                reloadRow(w.getAcc());
            }
        }
        else{
            JOptionPane.showMessageDialog(this, 
                    "Account must be opened to de any operation",
                    "ERROR!!", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }//GEN-LAST:event_WithdrawBtn1ActionPerformed

    private void AddAccBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddAccBtnMouseClicked
        // TODO add your handling code here:MOUSE CLICK ADD ACCOUNT
        ADDACCOUNT_UI NewAcc = new ADDACCOUNT_UI(this, true);
        NewAcc.setVisible(true);
    }//GEN-LAST:event_AddAccBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    /***NEEDED METHODS***/
    public javax.swing.JTable getTable(){
        return this.AccTable;
    }
    public int getAccNum(){
    int i = (int) AccTable.getValueAt(0, 1);
    return i;
    }
    public void addAccount(UserAccount acc){
        DefaultTableModel model = (DefaultTableModel) AccTable.getModel();
        model.addRow(new Object[] {acc.getName(),acc.getAccountNumber(),acc.getBalance(),
            acc.getAccountType(),acc.accountPresent()});
    }
    private void reloadRow(UserAccount a){
        DefaultTableModel model = (DefaultTableModel) AccTable.getModel();
        model.setValueAt(a.getBalance(), 0, 2);
        model.setValueAt(a.accountPresent(),0 , 4);
    }
    private void reloadRow2(UserAccount a,int row){
        DefaultTableModel model = (DefaultTableModel) AccTable.getModel();
        model.setValueAt(a.getBalance(), row, 2);
    }
    private void enableBtns(boolean active){
        WithdrawBtn1.setEnabled(active);
        DepositBtn.setEnabled(active);
        TransferBtn.setEnabled(active);
        CloseAccBtn.setEnabled(active);
        OpenAccBtn.setEnabled(active);
        LoadTransBtn.setEnabled(active);
        
    }
    /***END OF NEEDED METHODS***/
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MENU_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MENU_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MENU_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MENU_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
                try {
                    new MENU_UI().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(MENU_UI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AboutBtn;
    private javax.swing.JTable AccTable;
    private javax.swing.JButton AddAccBtn;
    private javax.swing.JButton CloseAccBtn;
    private javax.swing.JButton DepositBtn;
    private javax.swing.JButton EnqBtn;
    private javax.swing.JButton ExitBtn;
    private javax.swing.JButton FinishBtn;
    private javax.swing.JButton LoadTransBtn;
    private javax.swing.JButton OpenAccBtn;
    private javax.swing.JButton TransferBtn;
    private javax.swing.JButton WithdrawBtn1;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
